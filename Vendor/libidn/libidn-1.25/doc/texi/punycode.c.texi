@subheading punycode_encode
@anchor{punycode_encode}
@deftypefun {int} {punycode_encode} (size_t @var{input_length}, const punycode_uint [] @var{input}, const unsigned char [] @var{case_flags}, size_t * @var{output_length}, char [] @var{output})
@var{input_length}: The number of code points in the @code{input} array and
the number of flags in the @code{case_flags} array.

@var{input}: An array of code points.  They are presumed to be Unicode
code points, but that is not strictly REQUIRED.  The array
contains code points, not code units.  UTF-16 uses code units
D800 through DFFF to refer to code points 10000..10FFFF.  The
code points D800..DFFF do not occur in any valid Unicode string.
The code points that can occur in Unicode strings (0..D7FF and
E000..10FFFF) are also called Unicode scalar values.

@var{case_flags}: A @code{NULL} pointer or an array of boolean values parallel
to the @code{input} array.  Nonzero (true, flagged) suggests that the
corresponding Unicode character be forced to uppercase after
being decoded (if possible), and zero (false, unflagged) suggests
that it be forced to lowercase (if possible).  ASCII code points
(0..7F) are encoded literally, except that ASCII letters are
forced to uppercase or lowercase according to the corresponding
case flags.  If @code{case_flags} is a @code{NULL} pointer then ASCII letters
are left as they are, and other code points are treated as
unflagged.

@var{output_length}: The caller passes in the maximum number of ASCII
code points that it can receive.  On successful return it will
contain the number of ASCII code points actually output.

@var{output}: An array of ASCII code points.  It is *not*
null-terminated; it will contain zeros if and only if the @code{input}
contains zeros.  (Of course the caller can leave room for a
terminator and add one if needed.)

Converts a sequence of code points (presumed to be Unicode code
points) to Punycode.

@strong{Return value:} The return value can be any of the @code{Punycode_status}
values defined above except @code{PUNYCODE_BAD_INPUT}.  If not
@code{PUNYCODE_SUCCESS}, then @code{output_size} and @code{output} might contain
garbage.
@end deftypefun

@subheading punycode_decode
@anchor{punycode_decode}
@deftypefun {int} {punycode_decode} (size_t @var{input_length}, const char [] @var{input}, size_t * @var{output_length}, punycode_uint [] @var{output}, unsigned char [] @var{case_flags})
@var{input_length}: The number of ASCII code points in the @code{input} array.

@var{input}: An array of ASCII code points (0..7F).

@var{output_length}: The caller passes in the maximum number of code
points that it can receive into the @code{output} array (which is also
the maximum number of flags that it can receive into the
@code{case_flags} array, if @code{case_flags} is not a @code{NULL} pointer).  On
successful return it will contain the number of code points
actually output (which is also the number of flags actually
output, if case_flags is not a null pointer).  The decoder will
never need to output more code points than the number of ASCII
code points in the input, because of the way the encoding is
defined.  The number of code points output cannot exceed the
maximum possible value of a punycode_uint, even if the supplied
@code{output_length} is greater than that.

@var{output}: An array of code points like the input argument of
@code{punycode_encode()} (see above).

@var{case_flags}: A @code{NULL} pointer (if the flags are not needed by the
caller) or an array of boolean values parallel to the @code{output}
array.  Nonzero (true, flagged) suggests that the corresponding
Unicode character be forced to uppercase by the caller (if
possible), and zero (false, unflagged) suggests that it be forced
to lowercase (if possible).  ASCII code points (0..7F) are output
already in the proper case, but their flags will be set
appropriately so that applying the flags would be harmless.

Converts Punycode to a sequence of code points (presumed to be
Unicode code points).

@strong{Return value:} The return value can be any of the @code{Punycode_status}
values defined above.  If not @code{PUNYCODE_SUCCESS}, then
@code{output_length}, @code{output}, and @code{case_flags} might contain garbage.
@end deftypefun

