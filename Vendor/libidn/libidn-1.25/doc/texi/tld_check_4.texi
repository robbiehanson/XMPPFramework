@subheading tld_check_4
@anchor{tld_check_4}
@deftypefun {int} {tld_check_4} (const uint32_t * @var{in}, size_t @var{inlen}, size_t * @var{errpos}, const Tld_table ** @var{overrides})
@var{in}: Array of unicode code points to process. Does not need to be
zero terminated.

@var{inlen}: Number of unicode code points.

@var{errpos}: Position of offending character is returned here.

@var{overrides}: A @code{Tld_table} array of additional domain restriction
structures that complement and supersede the built-in information.

Test each of the code points in @code{in} for whether or not they are
allowed by the information in @code{overrides} or by the built-in TLD
restriction data. When data for the same TLD is available both
internally and in @code{overrides}, the information in @code{overrides} takes
precedence. If several entries for a specific TLD are found, the
first one is used.  If @code{overrides} is @code{NULL}, only the built-in
information is used.  The position of the first offending character
is returned in @code{errpos}.

@strong{Return value:} Returns the @code{Tld_rc} value @code{TLD_SUCCESS} if all code
points are valid or when @code{tld} is null, @code{TLD_INVALID} if a
character is not allowed, or additional error codes on general
failure conditions.
@end deftypefun

